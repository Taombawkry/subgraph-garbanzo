// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class EventEscrowDeployed extends ethereum.Event {
  get params(): EventEscrowDeployed__Params {
    return new EventEscrowDeployed__Params(this);
  }
}

export class EventEscrowDeployed__Params {
  _event: EventEscrowDeployed;

  constructor(event: EventEscrowDeployed) {
    this._event = event;
  }

  get usdcToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beneficiaries(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get numBeneficiaries(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PaymentDistributed extends ethereum.Event {
  get params(): PaymentDistributed__Params {
    return new PaymentDistributed__Params(this);
  }
}

export class PaymentDistributed__Params {
  _event: PaymentDistributed;

  constructor(event: PaymentDistributed) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get indexedcaller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class EventEscrow extends ethereum.SmartContract {
  static bind(address: Address): EventEscrow {
    return new EventEscrow("EventEscrow", address);
  }

  beneficiaries(param0: BigInt): Address {
    let result = super.call(
      "beneficiaries",
      "beneficiaries(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_beneficiaries(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "beneficiaries",
      "beneficiaries(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numBeneficiaries(): BigInt {
    let result = super.call(
      "numBeneficiaries",
      "numBeneficiaries():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_numBeneficiaries(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numBeneficiaries",
      "numBeneficiaries():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payouts(param0: Address): BigInt {
    let result = super.call("payouts", "payouts(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_payouts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("payouts", "payouts(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdcToken(): Address {
    let result = super.call("usdcToken", "usdcToken():(address)", []);

    return result[0].toAddress();
  }

  try_usdcToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdcToken", "usdcToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdcToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _beneficiaries(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _shares(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DistributePaymentsCall extends ethereum.Call {
  get inputs(): DistributePaymentsCall__Inputs {
    return new DistributePaymentsCall__Inputs(this);
  }

  get outputs(): DistributePaymentsCall__Outputs {
    return new DistributePaymentsCall__Outputs(this);
  }
}

export class DistributePaymentsCall__Inputs {
  _call: DistributePaymentsCall;

  constructor(call: DistributePaymentsCall) {
    this._call = call;
  }
}

export class DistributePaymentsCall__Outputs {
  _call: DistributePaymentsCall;

  constructor(call: DistributePaymentsCall) {
    this._call = call;
  }
}
